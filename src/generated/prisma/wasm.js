
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  internalWalletAddress: 'internalWalletAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  nickname: 'nickname',
  avatar: 'avatar',
  bio: 'bio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  description: 'description',
  avatar: 'avatar',
  website: 'website',
  email: 'email',
  phone: 'phone',
  address: 'address',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  price: 'price',
  date: 'date',
  time: 'time',
  ticketsAvailable: 'ticketsAvailable',
  ticketsSold: 'ticketsSold',
  imageUrl: 'imageUrl',
  description: 'description',
  fullAddress: 'fullAddress',
  schedule: 'schedule',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  collectionNftAddress: 'collectionNftAddress',
  candyMachineAddress: 'candyMachineAddress',
  categoryId: 'categoryId',
  organizerId: 'organizerId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  quantity: 'quantity',
  totalPrice: 'totalPrice',
  status: 'status',
  transactionHash: 'transactionHash',
  nftMintAddress: 'nftMintAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  orderId: 'orderId',
  userId: 'userId',
  nftMintAddress: 'nftMintAddress',
  tokenId: 'tokenId',
  metadataUri: 'metadataUri',
  isValid: 'isValid',
  isUsed: 'isUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  nftMintAddress: 'nftMintAddress',
  eventId: 'eventId',
  sellerId: 'sellerId',
  listingAddress: 'listingAddress',
  auctionHouseAddress: 'auctionHouseAddress',
  price: 'price',
  originalPrice: 'originalPrice',
  status: 'status',
  transactionHash: 'transactionHash',
  soldTo: 'soldTo',
  soldAt: 'soldAt',
  sellerSignature: 'sellerSignature',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlatformConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentDistributionScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  totalAmount: 'totalAmount',
  organizerShare: 'organizerShare',
  platformShare: 'platformShare',
  organizerWallet: 'organizerWallet',
  platformWallet: 'platformWallet',
  transactionHash: 'transactionHash',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  Organizer: 'Organizer',
  Category: 'Category',
  Event: 'Event',
  Order: 'Order',
  Ticket: 'Ticket',
  Listing: 'Listing',
  PlatformConfig: 'PlatformConfig',
  PaymentDistribution: 'PaymentDistribution'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/l0xa1/Desktop/etcha/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/l0xa1/Desktop/etcha/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                    String   @id @default(cuid())\n  walletAddress         String   @unique // External wallet address\n  internalWalletAddress String   @unique // Internal derived wallet address\n  createdAt             DateTime @default(now())\n  updatedAt             DateTime @updatedAt\n\n  profile   Profile?\n  organizer Organizer?\n  orders    Order[]\n  tickets   Ticket[]\n  listings  Listing[]\n\n  @@map(\"users\")\n}\n\nmodel Profile {\n  id        String   @id @default(cuid())\n  userId    String   @unique\n  nickname  String?\n  avatar    String?\n  bio       String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"profiles\")\n}\n\nmodel Organizer {\n  id          String   @id @default(cuid())\n  userId      String   @unique\n  companyName String\n  description String?\n  avatar      String?\n  website     String?\n  email       String?\n  phone       String?\n  address     String?\n  isVerified  Boolean  @default(false)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  events Event[]\n\n  @@map(\"organizers\")\n}\n\nmodel Category {\n  id        String   @id @default(cuid())\n  name      String   @unique\n  value     String   @unique\n  icon      String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  events Event[]\n\n  @@map(\"categories\")\n}\n\nmodel Event {\n  id               String   @id @default(cuid())\n  title            String\n  price            Float // Price in SOL (replaced USDC)\n  date             DateTime\n  time             String\n  ticketsAvailable Int\n  ticketsSold      Int      @default(0)\n  imageUrl         String\n  description      String\n  fullAddress      String\n  schedule         String // JSON string of schedule items\n  isActive         Boolean  @default(true)\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  // Solana blockchain fields\n  collectionNftAddress String? @unique // Collection NFT address on Solana\n  candyMachineAddress  String? @unique // Candy Machine address\n\n  categoryId  String\n  organizerId String?\n  category    Category   @relation(fields: [categoryId], references: [id])\n  organizer   Organizer? @relation(fields: [organizerId], references: [id])\n  orders      Order[]\n  tickets     Ticket[]\n  listings    Listing[]\n\n  @@map(\"events\")\n}\n\nmodel Order {\n  id              String   @id @default(cuid())\n  eventId         String\n  userId          String\n  quantity        Int\n  totalPrice      Float // Total price in SOL (replaced USDC)\n  status          String   @default(\"pending\") // pending, confirmed, failed, cancelled\n  transactionHash String? // Solana transaction hash\n  nftMintAddress  String? // NFT mint address for tickets (deprecated, use Ticket.nftMintAddress)\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  event               Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)\n  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)\n  tickets             Ticket[]\n  paymentDistribution PaymentDistribution?\n\n  @@map(\"orders\")\n}\n\nmodel Ticket {\n  id             String   @id @default(cuid())\n  eventId        String\n  orderId        String\n  userId         String\n  nftMintAddress String   @unique\n  tokenId        Int\n  metadataUri    String?\n  isValid        Boolean  @default(true)\n  isUsed         Boolean  @default(false)\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)\n  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)\n  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"tickets\")\n}\n\nmodel Listing {\n  id                  String    @id @default(cuid())\n  nftMintAddress      String    @unique\n  eventId             String\n  sellerId            String\n  listingAddress      String    @unique // Trade state address on Auction House\n  auctionHouseAddress String\n  price               Float // Price in SOL\n  originalPrice       Float // Original ticket price for comparison\n  status              String    @default(\"active\") // active, sold, cancelled\n  transactionHash     String?\n  soldTo              String? // Buyer wallet address\n  soldAt              DateTime?\n  sellerSignature     String? // Seller signature for deriving internal wallet keypair\n  createdAt           DateTime  @default(now())\n  updatedAt           DateTime  @updatedAt\n\n  event  Event @relation(fields: [eventId], references: [id], onDelete: Cascade)\n  seller User  @relation(fields: [sellerId], references: [id], onDelete: Cascade)\n\n  @@index([eventId, status])\n  @@index([sellerId, status])\n  @@map(\"listings\")\n}\n\nmodel PlatformConfig {\n  id        String   @id @default(cuid())\n  key       String   @unique\n  value     String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"platform_configs\")\n}\n\nmodel PaymentDistribution {\n  id              String   @id @default(cuid())\n  orderId         String   @unique\n  totalAmount     Float // Total amount in SOL\n  organizerShare  Float // 97.5% in SOL\n  platformShare   Float // 2.5% in SOL\n  organizerWallet String // Organizer's wallet address\n  platformWallet  String // Platform's wallet address\n  transactionHash String // Transaction hash of the distribution\n  status          String   @default(\"completed\") // completed, failed, pending\n  createdAt       DateTime @default(now())\n\n  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)\n\n  @@map(\"payment_distributions\")\n}\n",
  "inlineSchemaHash": "0b25bd6b4083d32bf0758e4c58a542f87227ddb023acb7a29e187e1b5fef799f",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"walletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"internalWalletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToUser\"},{\"name\":\"organizer\",\"kind\":\"object\",\"type\":\"Organizer\",\"relationName\":\"OrganizerToUser\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToUser\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TicketToUser\"},{\"name\":\"listings\",\"kind\":\"object\",\"type\":\"Listing\",\"relationName\":\"ListingToUser\"}],\"dbName\":\"users\"},\"Profile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nickname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProfileToUser\"}],\"dbName\":\"profiles\"},\"Organizer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companyName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrganizerToUser\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToOrganizer\"}],\"dbName\":\"organizers\"},\"Category\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"CategoryToEvent\"}],\"dbName\":\"categories\"},\"Event\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ticketsAvailable\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ticketsSold\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schedule\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"collectionNftAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"candyMachineAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToEvent\"},{\"name\":\"organizer\",\"kind\":\"object\",\"type\":\"Organizer\",\"relationName\":\"EventToOrganizer\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"EventToOrder\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"EventToTicket\"},{\"name\":\"listings\",\"kind\":\"object\",\"type\":\"Listing\",\"relationName\":\"EventToListing\"}],\"dbName\":\"events\"},\"Order\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nftMintAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToOrder\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrderToUser\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"OrderToTicket\"},{\"name\":\"paymentDistribution\",\"kind\":\"object\",\"type\":\"PaymentDistribution\",\"relationName\":\"OrderToPaymentDistribution\"}],\"dbName\":\"orders\"},\"Ticket\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nftMintAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"metadataUri\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isValid\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isUsed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToTicket\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToTicket\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TicketToUser\"}],\"dbName\":\"tickets\"},\"Listing\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nftMintAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sellerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"listingAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"auctionHouseAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"originalPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"soldTo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"soldAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sellerSignature\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToListing\"},{\"name\":\"seller\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ListingToUser\"}],\"dbName\":\"listings\"},\"PlatformConfig\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"platform_configs\"},\"PaymentDistribution\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"organizerShare\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"platformShare\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"organizerWallet\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"platformWallet\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"order\",\"kind\":\"object\",\"type\":\"Order\",\"relationName\":\"OrderToPaymentDistribution\"}],\"dbName\":\"payment_distributions\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

